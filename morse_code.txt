;*----------------------------------------------------------------------------
;* Name:    Lab_2_program.s 
;* Purpose: This code template is for Lab 2
;* Author: Eric Praetzel and Rasoul Keshavarzi 
;
; updated Jan 2018
;*----------------------------------------------------------------------------*/
		THUMB 		; Declare THUMB instruction set 
                AREA 		My_code, CODE, READONLY 	; 
                EXPORT 		__MAIN 		; Label __MAIN is used externally q
		ENTRY 
__MAIN
; The following lines are similar to Lab-1 but use an address, in r4, to make it easier.
; Note that one still needs to use the offsets of 0x20 and 0x40 to access the ports
;
; Turn off all LEDs 
		MOV 		R2, #0xC000 		;writing the last 4 bits to turn off three LEDs
		MOV 		R7, #0xB0000000		;storing the value to write to memory address 0x2009c020 to turn off the LEDs
		MOV 		R4, #0x0			
		MOVT 		R4, #0x2009			;storing the first 4 bits of the memory address of the 5 LEDs on port 2
		ADD 		R4, R4, R2 			; 0x2009C000 - the base address for dealing with the ports
		STR 		R7, [r4, #0x20]		; Turn off the three LEDs on port 1
		MOV 		R7, #0x0000007C		;storing the memory address to turn off the 5 LEDs on port 2 in R7 
		STR 		R7, [R4, #0x40] 	; Turn off five LEDs on port 2 
		

ResetLUT
      LDR         R5, =InputLUT       	; assign R5 to the character string address: InputLUT

NextChar
      LDRB        R0, [R5]      		; Read a (byte) character to convert to a Morse pattern
      ADD         R5, #1             	; point to next character - increment the pointer by 1 byte
      TEQ         R0, #0                ; test if we hit 0 (null at end of the string) then reset R5 to the start of character string
										;Next char
      BNE      ProcessChar   			; If we have a character process it- call the subroutine, else go to the next statement

										; If we read the null at end of the string - add the end of string delay and then reset R5 to the start of character string
      MOV      R0, #4      				; delay 4 extra spaces (7 total) between words
										;Next word
      BL      DELAY 					; call  the delay subroutine and pass in 4 to multiply the delay value 
	  
      B       ResetLUT					; branch back to the start of the loop 		

ProcessChar   BL      CHAR2MORSE   		; convert ASCII to Morse pattern in R1    

	  CLZ R9, R6 							;clear the initial zero values 
	  MOVS R1, R6, LSL R9 				;Put the value in R1 for bit shifting 

										; In the shift operation the bit which is being lost, or pushed off the end of the register,
										; "falls" into the C flag - then one can BCC (Branch Carry Clear) or BCS (Branch Carry Set) if the set was 0 or 1

										;   The Morse pattern has a variable number of leading zeros which must be removed to get to the Morse pattern
										;   One can use a loop, and peel off the leading 0's, until there is a 1 bit to send  (no code provided)
										;       The fastest way to do this is to count the number of leading zeros (CLZ) and use a shift left operation to remove those

										;  add code to remove leading zeros

										; Now use left left shift operation to peel off one bit at a time and turn the light on or off as necessary
Shift_and_display
	  LSLS      R1, R1, #1  			; shift R1 left by 1, because it's not LSL but LSLS the bit shifted off the end goes into the C flag
      BLCC   LED_OFF  				    ; branch somewhere it's zero because the Carry flag is clear 
									
      BLCS   LED_ON 				    ; branch somewhere - it's not zero because the Carry flag is set
	
										;  NOTE: ARM math, logic and branch instructions can be conditional and conditional branches can all jump to a subroutine
										;        So the above instructions could be BLCC and BLCS to conditionally branch to subroutines

										;  Delay after the LED has been turned on or off
										;  init R0 before calling DELAY to set how long to delay
      BL   DELAY
      TEQ         R1, #0 				;Check if the value in R1 is equal to zero and update condition code

										; NOTE: One interesting variation on this uses the fact that the computer is much faster than our vision.  If the light is off, turned on
										;  and turned off without a signif. time delay then the user will never see the light turn on.  This fact can be used to shorten the code
										;  which turns the lights on OR off

										;  Now test R1 for zero to see if all bits are shifted as the last bit is always a 1 and it's followed by 0'sA

										   ;test R1 for 0 to see if we're done
											  
										;  If we're not done then loop back to Shift_and_display to shift the next bit
											
										;  If we're done then branch back to get the next character
	
 
	 BNE      Shift_and_display			; if its not equal to zero then go back 
	 MOV 		R11, #0xB0000000		;Turn it off, every time you want to delay in between the characters 
	 STR 	R11, [R4, #0x20]
	 MOV R0, #3							; delay of 3 * 500 ms in between each character 
	 BL      DELAY						;CALL DELAY FOR NEXT CHAR
									

     B NextChar   						; This is the end of the main program 

										;
										;	Additional - Optional - Fun
										; 
										; Are you still bored?  You want to make sweet Morse Code Music?
										; Well - lets get the speaker humming.
										;
										; Note: If you do use this then decrease the delay to 50 to 100ms so that one can both "read" the LED and audio pattern
										;
										; By modifying your 500ms delay loop to be two loops - an inner loop of 0x200 that toggles the speaker when done
										;  and an outer loop to ensure that the total delay is 500ms
										;
										; The speaker is on Port 0 ping 26 and by toggling it's at an audible frequency one can make a sound
										;
										; A simple hack to this code is to modify the EOR line to use another register.  If the register is
										; 0x4000000 then the speaker will sound; but if it's 0x0 then the speaker stays silent
										;
												; LDR	R4, =LED_PORT_ADR	; setup speaker address
												; MOV	R5, #0x4000000		; This is bit 26 which goes to the speaker
										; Again		MOV	R3, #0x200
										; loopBuzz	MOV	R2, #0x200		; aprox 1kHz since looping 0x10000 times is ~ 10Hz
										; loopMore	SUBS	R2, #1			; decreament inner loop to make a sound;
												; BNE	loopMore
												; EOR	R5, #0x4000000		; toggle speaker output
												; STR	R5, [R4]		; write to speaker output
												; SUBS	R3, #1
												; B	Again



										; Subroutines
										;
										;			convert ASCII character to Morse pattern
										;			pass ASCII character in R0, output in R1
										;			index into MorseLuT must be by steps of 2 bytes
CHAR2MORSE	STMFD	R13!,{R14}			; push Link Register (return address) on stack  R14- instruction
		
		SUB R0, R0, #0X41				;Retrive the index value and store in R0 
		LDR  R3, =MorseLUT				;Retrive the address of Morse-table
		
		MOV R8, #1						; storing the number of left shifts in R8 
		
		LSL R0, R0, R8					; left shit R0 by 2 to get the index of the value from the start index of the MorseLUT array
		
		LDRH R6, [R3, R0]				; loading the halfword from the value at the indexed location into R6
		
		
		LDMFD		R13!,{R15}			; restore LR to R15 the Program Counter to return


										; Turn the LED on, but deal with the stack in a simpler way
										; NOTE: This method of returning from subroutine (BX  LR) does NOT work if subroutines are nested!!

LED_ON 	STMFD	R13!,{R4}				; preserve R3 and R4 on the R13 stack
		MOV 		R11, #0xA0000000 	; value to turn the LED on
		STR 	R11, [R4, #0x20]		; offsetting the value in R4 to obtain the address of the LED and turning it ON 

		MOV R0, #1						; specifying that delay must be a 1 - 500 ms delay 
		LDMFD		R13!,{R4}			; restoring R4 from the stack
		
		BX 		LR						; branch to the address in the Link Register.  Ie return to the caller

										; Turn the LED off, but deal with the stack in the proper way
										; the Link register gets pushed onto the stack so that subroutines can be nested

LED_OFF	STMFD		R13!,{R4, R3, R14}	; push R3 and Link Register (return address) on stack
		MOV 		R11, #0xB0000000 	; value to turn the LED off
		STR 	R11, [R4, #0x20]		; offsetting the value in R4 to obtain the address of the LED and turning it ON 

		MOV R0, #1						; specifying that delay must be a 1 - 500 ms delay 
		LDMFD		R13!,{R4, R3, R15}	; restore R3 and LR to R15 the Program Counter to return
		
										;	Delay 500ms * R0 times
										;	Use the delay loop from Lab-1 but loop R0 times around


DELAY	STMFD		R13!,{R2, R14}		;delay subroutine
	
	MOVT R11, #0x000A					; storing the counter value that represents 500 ms
	MUL R0, R0, R11						; multiply the 500 ms value by the value in R0- to indicate the total time to delay depending on what part of the word the program is executing

Inner_Delay 
	SUBS 		R0, #1 					; subtract 1 from delay counter and updates condition code
	BNE Inner_Delay		
		
exitDelay	LDMFD		R13!,{R2, R15}

										
										; Data used in the program
										; DCB is Define Constant Byte size
										; DCW is Define Constant Word (16-bit) size
										; EQU is EQUate or assign a value.  This takes no memory but instead of typing the same address in many places one can just use an EQU

		ALIGN							; make sure things fall on word addresses

										; One way to provide data to convert to Morse code is to use a string stored in memory.
										; Simply read bytes of the string until the NULL or "0" is hit.  This makes it very easy to loop until done.

InputLUT	DCB		"RVLHA", 0			; strings must be stored, and read, as BYTES

		ALIGN							; make sure things fall on word addresses
MorseLUT 
		DCW 	0x17, 0x1D5, 0x75D, 0x75 	; A, B, C, D
		DCW 	0x1, 0x15D, 0x1DD, 0x55 	; E, F, G, H
		DCW 	0x5, 0x1777, 0x1D7, 0x175 	; I, J, K, L
		DCW 	0x77, 0x1D, 0x777, 0x5DD 	; M, N, O, P
		DCW 	0x1DD7, 0x5D, 0x15, 0x7 	; Q, R, S, T
		DCW 	0x57, 0x157, 0x177, 0x757 	; U, V, W, X
		DCW 	0x1D77, 0x775 			; Y, Z

										; One can also define an address using the EQUate directive

LED_PORT_ADR	EQU	0x2009c000			; Base address of the memory that controls I/O like LEDs

		END 
